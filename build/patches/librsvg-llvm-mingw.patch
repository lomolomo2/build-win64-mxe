From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 5 May 2021 21:00:00 +0200
Subject: [PATCH 1/4] Add `armv7-pc-windows-gnullvm` target

Upstream-Status: Inappropriate [enable feature]
Upstream only accepts Rust targets that are available in stable releases.

diff --git a/vendor/cfg-expr/src/targets/builtins.rs b/vendor/cfg-expr/src/targets/builtins.rs
index 1111111..2222222 100644
--- a/vendor/cfg-expr/src/targets/builtins.rs
+++ b/vendor/cfg-expr/src/targets/builtins.rs
@@ -689,6 +689,19 @@ pub const ALL_BUILTINS: &[TargetInfo] = &[
         has_atomics: HasAtomics::atomic_8_16_32_64_ptr,
         panic: Panic::unwind,
     },
+    TargetInfo {
+        triple: Triple::new_const("armv7-pc-windows-gnullvm"),
+        os: Some(Os::windows),
+        abi: None,
+        arch: Arch::arm,
+        env: Some(Env::gnu),
+        vendor: Some(Vendor::pc),
+        families: Families::windows,
+        pointer_width: 32,
+        endian: Endian::little,
+        has_atomics: HasAtomics::atomic_8_16_32_64_ptr,
+        panic: Panic::unwind,
+    },
     TargetInfo {
         triple: Triple::new_const("armv7-sony-vita-newlibeabihf"),
         os: Some(Os::vita),

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 21 Sep 2020 11:00:00 +0200
Subject: [PATCH 2/4] Fix linker error on `armv7-pc-windows-gnullvm`

Details:
lld-link: error: undefined symbol: __aeabi_idiv
>>> referenced by libcompiler_builtins-<HASH>.rlib(<O_FILE>):(__aeabi_idivmod)

Upstream-Status: Pending

diff --git a/vendor/compiler_builtins/build.rs b/vendor/compiler_builtins/build.rs
index 1111111..2222222 100644
--- a/vendor/compiler_builtins/build.rs
+++ b/vendor/compiler_builtins/build.rs
@@ -366,7 +366,7 @@ mod c {
             && target_os != "ios"
             && target_os != "watchos"
             && target_os != "tvos"
-            && target_env != "msvc"
+            && target_os != "windows"
         {
             sources.extend(&[
                 ("__aeabi_div0", "arm/aeabi_div0.c"),

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 17 Feb 2024 10:37:54 +0100
Subject: [PATCH 3/4] Fix build errors on `armv7-pc-windows-gnullvm`

Details:
error[E0412]: cannot find type `WSADATA` in this scope
    --> vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs:198:104
     |
198  | ::windows_targets::link!("ws2_32.dll" "system" fn WSAStartup(wversionrequested : u16, lpwsadata : *mut WSADATA) -> i32);
     |                                                                                                        ^^^^^^^ help: a struct with a similar name exists: `WSPDATA`
...
6380 | pub struct WSPDATA {
     | ------------------ similarly named struct `WSPDATA` defined here

error[E0412]: cannot find type `SERVENT` in this scope
   --> vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs:272:144
    |
272 | ...PCSTR, proto : ::windows_sys::core::PCSTR) -> *mut SERVENT);
    |                                                       ^^^^^^^ not found in this scope

error[E0412]: cannot find type `SERVENT` in this scope
   --> vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs:273:121
    |
273 | ::windows_targets::link!("ws2_32.dll" "system" fn getservbyport(port : i32, proto : ::windows_sys::core::PCSTR) -> *mut SERVENT);
    |                                                                                                                         ^^^^^^^ not found in this scope

Upstream-Status: Pending

diff --git a/vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs b/vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs
index 1111111..2222222 100644
--- a/vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs
+++ b/vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs
@@ -4762,16 +4762,16 @@ impl ::core::clone::Clone for SERVENT {
     }
 }
 #[repr(C)]
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 pub struct SERVENT {
     pub s_name: ::windows_sys::core::PSTR,
     pub s_aliases: *mut *mut i8,
     pub s_port: i16,
     pub s_proto: ::windows_sys::core::PSTR,
 }
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 impl ::core::marker::Copy for SERVENT {}
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 impl ::core::clone::Clone for SERVENT {
     fn clone(&self) -> Self {
         *self
@@ -5933,7 +5933,7 @@ impl ::core::clone::Clone for WSADATA {
     }
 }
 #[repr(C)]
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 pub struct WSADATA {
     pub wVersion: u16,
     pub wHighVersion: u16,
@@ -5943,9 +5943,9 @@ pub struct WSADATA {
     pub iMaxUdpDg: u16,
     pub lpVendorInfo: ::windows_sys::core::PSTR,
 }
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 impl ::core::marker::Copy for WSADATA {}
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 impl ::core::clone::Clone for WSADATA {
     fn clone(&self) -> Self {
         *self

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 10 Feb 2024 14:47:03 +0100
Subject: [PATCH 4/4] Sync x86 chkstk intrinsics with LLVM

Incorporates the following commits:
https://github.com/llvm/llvm-project/commit/885d7b759b5c166c07c07f4c58c6e0ba110fb0c2
https://github.com/llvm/llvm-project/commit/1f9eff100ce8faea1284d68b779d844c6e019b77
https://github.com/llvm/llvm-project/commit/7a5cba8bea8f774d48db1b0426bcc102edd2b69f

Upstream-Status: Submitted [https://github.com/rust-lang/compiler-builtins/pull/575]

diff --git a/vendor/compiler_builtins/src/x86.rs b/vendor/compiler_builtins/src/x86.rs
index 1111111..2222222 100644
--- a/vendor/compiler_builtins/src/x86.rs
+++ b/vendor/compiler_builtins/src/x86.rs
@@ -6,39 +6,8 @@ use core::intrinsics;
 // calling convention which can't be implemented using a normal Rust function
 
 // NOTE These functions are never mangled as they are not tested against compiler-rt
-// and mangling ___chkstk would break the `jmp ___chkstk` instruction in __alloca
 
 intrinsics! {
-    #[naked]
-    #[cfg(all(
-        windows,
-        target_env = "gnu",
-        not(feature = "no-asm")
-    ))]
-    pub unsafe extern "C" fn ___chkstk_ms() {
-        core::arch::asm!(
-            "push   %ecx",
-            "push   %eax",
-            "cmp    $0x1000,%eax",
-            "lea    12(%esp),%ecx",
-            "jb     1f",
-            "2:",
-            "sub    $0x1000,%ecx",
-            "test   %ecx,(%ecx)",
-            "sub    $0x1000,%eax",
-            "cmp    $0x1000,%eax",
-            "ja     2b",
-            "1:",
-            "sub    %eax,%ecx",
-            "test   %ecx,(%ecx)",
-            "pop    %eax",
-            "pop    %ecx",
-            "ret",
-            options(noreturn, att_syntax)
-        );
-    }
-
-    // FIXME: __alloca should be an alias to __chkstk
     #[naked]
     #[cfg(all(
         windows,
@@ -46,19 +15,7 @@ intrinsics! {
         not(feature = "no-asm")
     ))]
     pub unsafe extern "C" fn __alloca() {
-        core::arch::asm!(
-            "jmp ___chkstk", // Jump to ___chkstk since fallthrough may be unreliable"
-            options(noreturn, att_syntax)
-        );
-    }
-
-    #[naked]
-    #[cfg(all(
-        windows,
-        target_env = "gnu",
-        not(feature = "no-asm")
-    ))]
-    pub unsafe extern "C" fn ___chkstk() {
+        // _chkstk and _alloca are the same function
         core::arch::asm!(
             "push   %ecx",
             "cmp    $0x1000,%eax",
diff --git a/vendor/compiler_builtins/src/x86_64.rs b/vendor/compiler_builtins/src/x86_64.rs
index 1111111..2222222 100644
--- a/vendor/compiler_builtins/src/x86_64.rs
+++ b/vendor/compiler_builtins/src/x86_64.rs
@@ -6,7 +6,6 @@ use core::intrinsics;
 // calling convention which can't be implemented using a normal Rust function
 
 // NOTE These functions are never mangled as they are not tested against compiler-rt
-// and mangling ___chkstk would break the `jmp ___chkstk` instruction in __alloca
 
 intrinsics! {
     #[naked]
@@ -36,49 +35,6 @@ intrinsics! {
             options(noreturn, att_syntax)
         );
     }
-
-    #[naked]
-    #[cfg(all(
-        any(all(windows, target_env = "gnu"), target_os = "uefi"),
-        not(feature = "no-asm")
-    ))]
-    pub unsafe extern "C" fn __alloca() {
-        core::arch::asm!(
-            "mov    %rcx,%rax", // x64 _alloca is a normal function with parameter in rcx
-            "jmp    ___chkstk", // Jump to ___chkstk since fallthrough may be unreliable"
-            options(noreturn, att_syntax)
-        );
-    }
-
-    #[naked]
-    #[cfg(all(
-        any(all(windows, target_env = "gnu"), target_os = "uefi"),
-        not(feature = "no-asm")
-    ))]
-    pub unsafe extern "C" fn ___chkstk() {
-        core::arch::asm!(
-            "push   %rcx",
-            "cmp    $0x1000,%rax",
-            "lea    16(%rsp),%rcx", // rsp before calling this routine -> rcx
-            "jb     1f",
-            "2:",
-            "sub    $0x1000,%rcx",
-            "test   %rcx,(%rcx)",
-            "sub    $0x1000,%rax",
-            "cmp    $0x1000,%rax",
-            "ja     2b",
-            "1:",
-            "sub    %rax,%rcx",
-            "test   %rcx,(%rcx)",
-            "lea    8(%rsp),%rax",  // load pointer to the return address into rax
-            "mov    %rcx,%rsp",     // install the new top of stack pointer into rsp
-            "mov    -8(%rax),%rcx", // restore rcx
-            "push   (%rax)",        // push return address onto the stack
-            "sub    %rsp,%rax",     // restore the original value in rax
-            "ret",
-            options(noreturn, att_syntax)
-        );
-    }
 }
 
 // HACK(https://github.com/rust-lang/rust/issues/62785): x86_64-unknown-uefi needs special LLVM
